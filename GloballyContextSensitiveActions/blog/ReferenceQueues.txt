Sometimes it is desired to know when an object gets garbage collected, so that we can do some additional resource cleanup. In the last <a href="http://www.javalobby.org/java/forums/t19468.html">tip</a>, we learnt how to use weak listeners to avoid memory leaks. The WeakPropertyChangeListener unregisters itself from the source, when a change is notified and weakReference is referring to null. i.e, there is a delay in the cleanup. for example: the frequency of change notifications from source may be very rare.

Is it possible to some how know when the weakReference is got garbage collected and unregister the listener immediately. Java provides this feature using <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ref/ReferenceQueue.html">ReferenceQueue</a>

We create a subclass of RefernceQueue, which will help us in performing such resource cleanup very easily:

[code]
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
public class ActiveReferenceQueue 
          extends ReferenceQueue implements Runnable{ 
    private static ActiveReferenceQueue singleton = null; 
 
    public static ActiveReferenceQueue getInstance(){ 
        if(singleton==null) 
            singleton = new ActiveReferenceQueue(); 
        return singleton; 
    } 
 
    private ActiveReferenceQueue(){ 
        Thread t = new Thread(this, "ActiveReferenceQueue"); 
        t.setDaemon(false); 
        t.start(); 
    } 
 
    public void run(){ 
        for(;;){ 
            try{ 
                Reference ref = super.remove(0); 
                if(ref instanceof Runnable){ 
                    try{ 
                        ((Runnable)ref).run(); 
                    } catch(Exception e){ 
                        e.printStackTrace(); 
                    } 
                } 
            } catch(InterruptedException e){ 
                e.printStackTrace(); 
            } 
        } 
    } 
} 
[/code]
ActiveReferenceQueue is a singleton class, and starts a thread when it is instantiated. This thread keeps polling for weakReferences that are eligible for garbage collection, and if those weakReferenes implement Runnable interface, it executes them.

To use this, we can create a subclass of WeakReference implementing Runnable interface, which does the cleanup it run() method.

Let us see how we will change the WeakPropertyChangeListener to use the above reference queue:
[code]
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
public class WeakPropertyChangeListener implements PropertyChangeListener{ 
    WeakReference listenerRef; 
    Object src; 
 
    public WeakPropertyChangeListener(PropertyChangeListener listener, Object src){ 
        listenerRef = new ListenerReference(listener, this); 
        this.src = src; 
    } 
 
    public void propertyChange(PropertyChangeEvent evt){ 
        PropertyChangeListener listener = (PropertyChangeListener)listenerRef.get(); 
        if(listener!=null) 
            listener.propertyChange(evt); 
    } 
 
    private void removeListener(){ 
        try{ 
            Method method = src.getClass().getMethod("removePropertyChangeListener" 
                    , new Class[] {PropertyChangeListener.class}); 
            method.invoke(src, new Object[]{ this }); 
        } catch(Exception e){ 
            e.printStackTrace(); 
        } 
    } 
 
    static class ListenerReference extends WeakReference{ 
        WeakPropertyChangeListener listener; 
 
        public ListenerReference(Object ref, WeakPropertyChangeListener listener){ 
            super(ref, ActiveReferenceQueue.getInstance()); 
            this.listener = listener; 
        } 
 
        public void run(){ 
            listener.removeListener(); 
            listener = null; 
        } 
    } 
}
[/code]


Enjoy!
Santhosh Kumar T 
Contributing Editor
santhosh@javalobby.org
santhosh@in.fiorano.com
http://www.jroller.com/page/santhosh
http://www.fiorano.com