In the previous post <a href="http://www.javalobby.org/java/forums/t19442.html">Context Sensitive Actions</a>, we leaned how to make an action context sensitive to a particular instance of JComponent. Now we will try to make action context sensitive to the current focused component.

Let us say, the application contains a JTable, JList, and JTree. All the three components have "selectAll" action in their action map. Then why don't we have a single action (either in menu or toolbar) which can be used to select all items in the current focused component.

To be precise the action shouldn't be invoked on current focused component. Why ?

let us say user selected a JTable, then the JTable becomes the current focused component. In order to invoke "selectAll" action, user clicks the menu and selects the action. During this process, the current focused component gets changed to JMenuBar, JMenu and JMenuItem, So current focused component will be JMenuItem, but we want the action to be performed on the JTable.

[code]
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
public class GloballyContextSensitiveAction implements Action{ 
    String actionName, shortDescription, longDescription; 
    Action delegate; 
    JComponent source; 
 
    private PropertyChangeListener focusOwnerListener = new PropertyChangeListener(){ 
        public void propertyChange(PropertyChangeEvent evt){ 
            if("focusOwner".equals(evt.getPropertyName())){ 
                if(evt.getNewValue() instanceof JComponent){ 
                    JComponent comp = (JComponent)evt.getNewValue(); 
                    Action action = comp.getActionMap().get(actionName); 
                    if(action!=null) 
                        changeDelegate(comp, action); 
                } 
            } 
        } 
    }; 
 
    public GloballyContextSensitiveAction(String actionName, 
              String shortDescription, String longDescription){ 
        this.actionName = actionName; 
        this.shortDescription = shortDescription; 
        this.longDescription = longDescription; 
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
                .addPropertyChangeListener(focusOwnerListener); 
    } 
 
 
    /*-------------------[ Delegate Listener ]--------------------------*/ 
 
    PropertyChangeSupport support = new PropertyChangeSupport(this); 
 
    private PropertyChangeListener delegateListener = new PropertyChangeListener(){ 
        public void propertyChange(PropertyChangeEvent evt){ 
            support.firePropertyChange(evt.getPropertyName()
                  , evt.getOldValue(), evt.getNewValue()); 
        } 
    }; 
 
    public void addPropertyChangeListener(PropertyChangeListener listener){ 
        support.addPropertyChangeListener(listener); 
    } 
 
    public void removePropertyChangeListener(PropertyChangeListener listener){ 
        support.removePropertyChangeListener(listener); 
    } 
 
    private void changeDelegate(JComponent comp, Action action){ 
        if(delegate!=null) 
            delegate.removePropertyChangeListener(delegateListener); 
        source = comp; 
        delegate = action; 
        delegate.addPropertyChangeListener(delegateListener); 
        boolean enabled = delegate.isEnabled(); 
        support.firePropertyChange("enabled", !enabled, enabled); 
    } 
 
    public boolean isEnabled(){ 
        return delegate!=null && delegate.isEnabled(); 
    } 
 
    public void setEnabled(boolean enabled){ 
        if(delegate!=null) 
            delegate.setEnabled(enabled); 
    } 
 
    public Object getValue(String key){ 
        if(key.equals(Action.NAME)) 
            return actionName; 
        else if(key.equals(Action.SHORT_DESCRIPTION)) 
            return shortDescription; 
        else if(key.equals(Action.LONG_DESCRIPTION)) 
            return longDescription; 
        else if(delegate!=null) 
            return delegate.getValue(key); 
        else 
            return null; 
    } 
 
    public void putValue(String key, Object value){ 
        if(key.equals(Action.NAME)) 
            actionName = (String)value; 
        else if(key.equals(Action.SHORT_DESCRIPTION)) 
            shortDescription = (String)value; 
        else if(key.equals(Action.LONG_DESCRIPTION)) 
            longDescription = (String)value; 
        else if(delegate!=null) 
            delegate.putValue(key, value); 
    } 
 
    public void actionPerformed(ActionEvent ae){ 
        if(delegate!=null) 
            delegate.actionPerformed(new ActionEvent(source, ae.getID(), 
                 ae.getActionCommand(), ae.getWhen(), ae.getModifiers())); 
    } 
}
[/code]

 The above class takes the actionName in the constructor. This actionName is used to find the action from the focused component. It registeres a property change listener to KeyboardFocusManager to listen for changes in focusOwner. When it is notified about the change in focusOwner, it changes its delegate action and fires appropriate property changes to its listeners. I doesn't do anything if the current focused component doesn't have any action with actionName as key.

<img src="http://www.javalobby.org/resources/santhosh/postings/GloballyContextSensitiveActions/GloballyContextSensitiveActions.gif"/>

<a href="http://www.javalobby.org/resources/santhosh/postings/GloballyContextSensitiveActions/GloballyContextSensitiveActions.jnlp">
<img border="0" src="http://java.sun.com/products/jfc/tsc/sightings/images/webstart.small.jpg" height="20"></a>


Enjoy!
Santhosh Kumar T 
Contributing Editor
santhosh@javalobby.org
santhosh@in.fiorano.com
http://www.jroller.com/page/santhosh
http://www.fiorano.com