In Windows, it is very common to show context menu (with cut, copy, paste etc) on textfields, textareas. I don't know about other operating systems. So any windows user using a swing application expects a popup menu on right click of text components.

When I am in doubt whether this application is swing or not, what I do is find any textfield and right click. if no popup appears then I conclude it as swing application.

<b>How do I provide context menu for text components ?</b>
<b>Solution1:</b>Create a subclass for each text component (JTextField, JPasswordField etc) and implement the logic inside these subclasses.
<b>Solution2:</b> Create a mouse listener which does the work of showing popup and add this to all text components of your applications.

<b>Each of the above solutions have their own drawbacks:</font></b>
<ul><li>Changing the complete swing application to use our subclass is a tedious job</li><li>If we use mouse listener, then it is also tedious job to ensure that this mouse listener is registered to all text components of you application</li><li>There is no way to make this work for text components that are not created by the user code such as JTextField in   JOptionPane.showInputDialog(...) or JFileChooser dialog.</li><li>If the applications tries to show its own popup menu for a text component we will run into problems</li></ul>

<b>I found a very clean solution for this problem:</b> We install our implmentation of EventQueue.
[code]
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
public class MyEventQueue extends EventQueue{ 
    protected void dispatchEvent(AWTEvent event){ 
        super.dispatchEvent(event); 
 
        // interested only in mouseevents 
        if(!(event instanceof MouseEvent)) 
            return; 
 
        MouseEvent me = (MouseEvent)event; 
 
        // interested only in popuptriggers 
        if(!me.isPopupTrigger()) 
            return; 
 
        // me.getComponent(...) retunrs the heavy weight component on which event occured 
        Component comp = SwingUtilities.getDeepestComponentAt(me.getComponent(), me.getX(), me.getY()); 
 
        // interested only in textcomponents 
        if(!(comp instanceof JTextComponent)) 
            return; 
 
        // no popup shown by user code 
        if(MenuSelectionManager.defaultManager().getSelectedPath().length>0) 
            return; 
 
        // create popup menu and show 
        JTextComponent tc = (JTextComponent)comp; 
        JPopupMenu menu = new JPopupMenu(); 
        menu.add(new CutAction(tc)); 
        menu.add(new CopyAction(tc)); 
        menu.add(new PasteAction(tc)); 
        menu.add(new DeleteAction(tc)); 
        menu.addSeparator(); 
        menu.add(new SelectAllAction(tc)); 

        Point pt = SwingUtilities.convertPoint(me.getComponent(), me.getPoint(), tc);
        menu.show(tc, pt.x, pt.y);
    } 
} 
[/code]
The above class is self-explanatory with comments.

The implementation of actions is here:
[code]
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
class CutAction extends AbstractAction{ 
    JTextComponent comp; 
 
    public CutAction(JTextComponent comp){ 
        super("Cut"); 
        this.comp = comp; 
    } 
 
    public void actionPerformed(ActionEvent e){ 
        comp.cut(); 
    } 
 
    public boolean isEnabled(){ 
        return comp.isEditable() 
                && comp.isEnabled() 
                && comp.getSelectedText()!=null; 
    } 
} 
 
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
class PasteAction extends AbstractAction{ 
    JTextComponent comp; 
 
    public PasteAction(JTextComponent comp){ 
        super("Paste"); 
        this.comp = comp; 
    } 
 
    public void actionPerformed(ActionEvent e){ 
        comp.paste(); 
    } 
 
    public boolean isEnabled(){ 
        if (comp.isEditable() && comp.isEnabled()){ 
            Transferable contents = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(this); 
            return contents.isDataFlavorSupported(DataFlavor.stringFlavor); 
        }else 
            return false; 
    } 
} 
 
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
class DeleteAction extends AbstractAction{ 
    JTextComponent comp; 
 
    public DeleteAction(JTextComponent comp){ 
        super("Delete"); 
        this.comp = comp; 
    } 
 
    public void actionPerformed(ActionEvent e){ 
        comp.replaceSelection(null); 
    } 
 
    public boolean isEnabled(){ 
        return comp.isEditable() 
                && comp.isEnabled() 
                && comp.getSelectedText()!=null; 
    } 
} 
 
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
class CopyAction extends AbstractAction{ 
    JTextComponent comp; 
 
    public CopyAction(JTextComponent comp){ 
        super("Copy"); 
        this.comp = comp; 
    } 
 
    public void actionPerformed(ActionEvent e){ 
        comp.copy(); 
    } 
 
    public boolean isEnabled(){ 
        return comp.isEnabled() 
                && comp.getSelectedText()!=null; 
    } 
} 
 
// @author Santhosh Kumar T - santhosh@in.fiorano.com 
class SelectAllAction extends AbstractAction{ 
    JTextComponent comp; 
 
    public SelectAllAction(JTextComponent comp){ 
        super("Select All"); 
        this.comp = comp; 
    } 
 
    public void actionPerformed(ActionEvent e){ 
        comp.selectAll(); 
    } 
 
    public boolean isEnabled(){ 
        return comp.isEnabled() 
                && comp.getText().length()>0; 
    } 
} 
[/code]

<b>How to use it:</b>
[code]
    public static void main(String[] args){ 
        Toolkit.getDefaultToolkit().getSystemEventQueue().push(new MyEventQueue()); 
        
        .....
    } 
[/code]
Just a single line in the beginning of your application's main method. So simple.

I created a webstart demo to show it in action:

<img border="0" src="http://www.jroller.com/resources/s/santhosh/TextFields1.gif" width="445" height="142">

There are two textfields in this demo. Second textfield shows a popupmenu in one of its mouse listener.

<img border="0" src="http://www.jroller.com/resources/s/santhosh/TextFields2.gif" width="445" height="142">

When click the button [JOptionPane], it shows a input message dialog which again contains a textfield, which is not created the demo.

<img border="0" src="http://www.jroller.com/resources/s/santhosh/TextFields3.gif" width="445" height="164">

Thus, this approach is very simple to use, and works perfectly, even if the application has its own popup menu on mouse click.

<a href="http://www.jroller.com/resources/s/santhosh/TextFields.jnlp"><img border="0" src="http://java.sun.com/products/jfc/tsc/sightings/images/webstart.small.jpg" width="115" height="20"></a>

Your comments are appreciated.
