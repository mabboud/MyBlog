<html>
<body>

<p><font size="2" face="Verdana">First have a look at the following screenshot 
to understand what I mean <b>&quot;Document Guard&quot;</b>.</font></p>
<p><font size="2" face="Verdana">
<img border="0" src="http://www.jroller.com/resources/s/santhosh/DocumentGuard.gif" width="519" height="318"></font></p>
<p><font size="2" face="Verdana">You want to restrict the user to edit some regions of 
the document for some reason. Let us say the text&nbsp; in guarded regions are 
generated by the tool and user should not be allowed to edit these regions. 
because they are auto-generated by program. if we allow use to make changes to 
those regions, those changes will be lost when auto-generated again.</font></p>
<p><font size="2" face="Verdana">Netbeans uses this approach, to restrict the 
user from editing the code generated by FormDesigner. So you might think that 
why not pull out that implementation from Netbeans and use it. It is very 
tightly coupled with other netbeans API, and it is difficult to separate it into 
a stand-alone class.</font></p>
<p><b><font size="2" face="Verdana">How do you restrict user from editing a 
portion of document ?</font></b></p>
<p><font size="2" face="Verdana">Normally most of programmers say, extend 
PlainDocument and implement the logic in your subclass. But there is a better 
approach for this: DocumentFilter</font></p>
<p><font size="2" face="Verdana"><b>NOTE: </b>DocumentFilter class is only 
available since JDK 1.4</font></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber1">
  <tr>
    <td width="100%">
    <pre><font style="font-family: monospaced;" color="#808080"><i>// @author Santhosh Kumar T - santhosh@in.fiorano.com</i></font><font style="font-family: monospaced;" color="#000080"><b>
public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>class</b></font><font style="font-family: monospaced;" color="#000000"> GuardFilter </font><font style="font-family: monospaced;" color="#000080"><b>extends</b></font><font style="font-family: monospaced;" color="#000000"> DocumentFilter{ 
    ArrayList pos = </font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> ArrayList(); 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> addGuardedBlock(Position start, Position end) </font><font style="font-family: monospaced;" color="#000080"><b>throws</b></font><font style="font-family: monospaced;" color="#000000"> BadLocationException{ 
        pos.add(</font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> Position[]{ start, end }); 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>private</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>boolean</b></font><font style="font-family: monospaced;" color="#000000"> isGuarded(</font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> offset, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> length){ 
        </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> u1 = offset, u2 = offset + length; 
        </font><font style="font-family: monospaced;" color="#000080"><b>for</b></font><font style="font-family: monospaced;" color="#000000">(</font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> i=</font><font style="font-family: monospaced;" color="#0000ff">0</font><font style="font-family: monospaced;" color="#000000">; i&lt;pos.size(); i++){ 
            Position p[] = (Position[])pos.get(i); 
            </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> g1 = p[</font><font style="font-family: monospaced;" color="#0000ff">0</font><font style="font-family: monospaced;" color="#000000">].getOffset()-</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">, g2 = p[</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">].getOffset()+</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">; 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// u1, g1, u2, g2 --&gt; guarded</i></font><font style="font-family: monospaced;" color="#000000"> 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(g1&lt;u2 &amp;&amp; u2&lt;g2) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">; 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// u1, g1, g2, u2 --&gt; guarded</i></font><font style="font-family: monospaced;" color="#000000"> 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(u1&lt;g1 &amp;&amp; g2&lt;u2) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">; 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// u1/g1, g2, u2 --&gt; guarded</i></font><font style="font-family: monospaced;" color="#000000"> 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(u1==g1 &amp;&amp; g2&lt;u2) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">; 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// u1, g1, u2/g2 --&gt; guarded</i></font><font style="font-family: monospaced;" color="#000000"> 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(u1&lt;g1 &amp;&amp; u2==g2) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">; 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// g1, u1, g2, u2 --&gt; guarded</i></font><font style="font-family: monospaced;" color="#000000"> 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(g1&lt;u1 &amp;&amp; u1&lt;g2) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">; 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// u1/g1, u2/g2 --&gt; guarded</i></font><font style="font-family: monospaced;" color="#000000"> 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(u1==g1 &amp;&amp; u2==g2) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">; 
        } 
        </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>false</b></font><font style="font-family: monospaced;" color="#000000">; 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> insertString(FilterBypass fb, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> offset, String string, AttributeSet attr) </font><font style="font-family: monospaced;" color="#000080"><b>throws</b></font><font style="font-family: monospaced;" color="#000000"> BadLocationException{ 
        System.err.println(</font><font style="font-family: monospaced;" color="#008000"><b>&quot;insert&quot;</b></font><font style="font-family: monospaced;" color="#000000">); 
        </font><font style="font-family: monospaced;" color="#000080"><b>for</b></font><font style="font-family: monospaced;" color="#000000">(</font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> i=</font><font style="font-family: monospaced;" color="#0000ff">0</font><font style="font-family: monospaced;" color="#000000">; i&lt;pos.size(); i++){ 
            Position p[] = (Position[])pos.get(i); 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(offset&gt;=p[</font><font style="font-family: monospaced;" color="#0000ff">0</font><font style="font-family: monospaced;" color="#000000">].getOffset() &amp;&amp; offset&lt;=p[</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">].getOffset()) 
                </font><font style="font-family: monospaced;" color="#000080"><b>return</b></font><font style="font-family: monospaced;" color="#000000">; 
        } 
        </font><font style="font-family: monospaced;" color="#000080"><b>super</b></font><font style="font-family: monospaced;" color="#000000">.insertString(fb, offset, string, attr); 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> replace(FilterBypass fb, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> offset, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> length, String text, AttributeSet attrs) </font><font style="font-family: monospaced;" color="#000080"><b>throws</b></font><font style="font-family: monospaced;" color="#000000"> BadLocationException{ 
        </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(!isGuarded(offset, length)) 
            </font><font style="font-family: monospaced;" color="#000080"><b>super</b></font><font style="font-family: monospaced;" color="#000000">.replace(fb, offset, length, text, attrs); 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> remove(FilterBypass fb, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> offset, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> length) </font><font style="font-family: monospaced;" color="#000080"><b>throws</b></font><font style="font-family: monospaced;" color="#000000"> BadLocationException{ 
        </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(!isGuarded(offset, length)) 
            </font><font style="font-family: monospaced;" color="#000080"><b>super</b></font><font style="font-family: monospaced;" color="#000000">.remove(fb, offset, length); 
    } 
} </font></pre>
    </td>
  </tr>
</table>
<p><b><font size="2" face="Verdana">Never use Offset rather use Positions. Why??</font></b></p>
<p><font size="2" face="Verdana">&nbsp;&nbsp;&nbsp;&nbsp; Let us say we want to 
guard line 2 to 5. Let us say if we have used offsets then when user inserts a new 
line in the beginning, the guarded lines are now line 3 to 5. If you use 
Position rather than offset,&nbsp; java will take care of this. You can ask for 
the current offset from a Postion using getOffset() method.</font></p>
<p><b><font size="2" face="Verdana">The above code is little complex. Why so??</font></b></p>
<p><font size="2" face="Verdana">&nbsp;&nbsp;&nbsp;&nbsp; Let us say we want to 
guard line 2 to 5. User has selected from line 1 line 6 and tried to delete. 
Then nothing should happen. i.e, we have to carefully able to recognize whether 
the editing region does overlaps partially with any guarded region.</font></p>
<p><font size="2" face="Verdana">And the above implementation allows multiple 
guarded regions. Note that the above filter is not in terms of lines. It lets 
you add a guarded region by its offset and length of the region.</font></p>
<p><b><font size="2" face="Verdana">How does user will be able to recognize 
whether a portion is guarded or not ?</font></b></p>
<p><font size="2" face="Verdana">We will highlight the guarded regions with 
different color. We could use the default selection highlighter that comes with 
JDK by just changing its highlight color. But there is a problem. We want the 
highlighter to extend the entire width of the editor. </font></p>
<p><font face="Verdana" size="2">Note that the selection highlighter should be 
given precedence over guarded highlighter. Because when user select some text in 
the guarded block, he/she would like the selected text to be highlighted by 
selection highlighter (see the screenshot)</font></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber2">
  <tr>
    <td width="100%">
    <pre><font style="font-family: monospaced;" color="#808080"><i>// @author Santhosh Kumar T - santhosh@in.fiorano.com</i></font><font style="font-family: monospaced;" color="#000080"><b>
public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>class</b></font><font style="font-family: monospaced;" color="#000000"> GuardBlockHighlightPainter </font><font style="font-family: monospaced;" color="#000080"><b>implements</b></font><font style="font-family: monospaced;" color="#000000"> Highlighter.HighlightPainter{ 
    </font><font style="font-family: monospaced;" color="#000080"><b>private</b></font><font style="font-family: monospaced;" color="#000000"> Color color; 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> GuardBlockHighlightPainter(Color color){ 
        </font><font style="font-family: monospaced;" color="#000080"><b>this</b></font><font style="font-family: monospaced;" color="#000000">.color = color; 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> GuardBlockHighlightPainter(){ 
        </font><font style="font-family: monospaced;" color="#000080"><b>this</b></font><font style="font-family: monospaced;" color="#000000">(</font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> Color(</font><font style="font-family: monospaced;" color="#0000ff">225</font><font style="font-family: monospaced;" color="#000000">, </font><font style="font-family: monospaced;" color="#0000ff">236</font><font style="font-family: monospaced;" color="#000000">, </font><font style="font-family: monospaced;" color="#0000ff">247</font><font style="font-family: monospaced;" color="#000000">)); 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> paint(Graphics g, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> p0, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> p1, Shape bounds, JTextComponent c){ 
        _paint(g, p0-</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">, p1+</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">, bounds, c); </font><font style="font-family: monospaced;" color="#808080"><i>// trick</i></font><font style="font-family: monospaced;" color="#000000">
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> _paint(Graphics g, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> offs0, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> offs1, Shape bounds, JTextComponent c){ 
        Rectangle alloc = bounds.getBounds(); 
        </font><font style="font-family: monospaced;" color="#000080"><b>try</b></font><font style="font-family: monospaced;" color="#000000">{ 
            </font><font style="font-family: monospaced;" color="#808080"><i>// --- determine locations ---</i></font><font style="font-family: monospaced;" color="#000000"> 
            TextUI mapper = c.getUI(); 
            Rectangle p0 = mapper.modelToView(c, offs0); 
            Rectangle p1 = mapper.modelToView(c, offs1); 
 
            </font><font style="font-family: monospaced;" color="#808080"><i>// --- render ---</i></font><font style="font-family: monospaced;" color="#000000"> 
 
            g.setColor(color); 
            </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">(p0.y==p1.y){ 
                </font><font style="font-family: monospaced;" color="#808080"><i>// same line, render a rectangle</i></font><font style="font-family: monospaced;" color="#000000"> 
                Rectangle r = p0.union(p1); 
                g.fillRect(r.x, r.y, r.width, r.height); 
            } </font><font style="font-family: monospaced;" color="#000080"><b>else</b></font><font style="font-family: monospaced;" color="#000000">{ 
                </font><font style="font-family: monospaced;" color="#808080"><i>// different lines</i></font><font style="font-family: monospaced;" color="#000000"> 
                </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> p0ToMarginWidth = alloc.x+alloc.width-p0.x; 
                g.fillRect(p0.x, p0.y, p0ToMarginWidth, p0.height); 
                </font><font style="font-family: monospaced;" color="#000080"><b>if</b></font><font style="font-family: monospaced;" color="#000000">((p0.y+p0.height)!=p1.y){ 
                    g.fillRect(alloc.x, p0.y+p0.height, alloc.width, 
                            p1.y-(p0.y+p0.height)); 
                } 
                g.fillRect(alloc.x, p1.y, (p1.x-alloc.x), p1.height); 
            } 
        } </font><font style="font-family: monospaced;" color="#000080"><b>catch</b></font><font style="font-family: monospaced;" color="#000000">(BadLocationException e){ 
            </font><font style="font-family: monospaced;" color="#808080"><i>// can't render</i></font><font style="font-family: monospaced;" color="#000000"> 
        } 
    } 
} </font></pre>
    </td>
  </tr>
</table>
<p><font size="2" face="Verdana">In the above class, you may notice that, when 
editor says to highlight from p0 to p1, it actually highlights p0-1 to p1+1. 
This is a trick!!</font></p>
<p><font size="2" face="Verdana">Now comes the class which manages both Filter 
and Highlighter:</font></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber3">
  <tr>
    <td width="100%">
    <pre><font style="font-family: monospaced;" color="#808080"><i>// @author Santhosh Kumar T - santhosh@in.fiorano.com</i></font><font style="font-family: monospaced;" color="#000080"><b>
public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>class</b></font><font style="font-family: monospaced;" color="#000000"> DocumentGuard{ 
    </font><font style="font-family: monospaced;" color="#000080"><b>private</b></font><font style="font-family: monospaced;" color="#000000"> JTextArea textComp; 
    </font><font style="font-family: monospaced;" color="#000080"><b>private</b></font><font style="font-family: monospaced;" color="#000000"> Highlighter.HighlightPainter highlightPainter = </font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> GuardBlockHighlightPainter(); 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>private</b></font><font style="font-family: monospaced;" color="#000000"> GuardFilter guardFilter = </font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> GuardFilter(); 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> DocumentGuard(JTextArea textComp){ 
        </font><font style="font-family: monospaced;" color="#000080"><b>this</b></font><font style="font-family: monospaced;" color="#000000">.textComp = textComp; 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> addGuardedLines(</font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> fromLine, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> toLine) </font><font style="font-family: monospaced;" color="#000080"><b>throws</b></font><font style="font-family: monospaced;" color="#000000"> BadLocationException{ 
        </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> fromOffset = textComp.getLineStartOffset(fromLine); 
        </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> toOffset = textComp.getLineEndOffset(toLine); 
        addGuardedBlock(fromOffset, toOffset); 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>private</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> addGuardedBlock(</font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> fromOffset, </font><font style="font-family: monospaced;" color="#000080"><b>int</b></font><font style="font-family: monospaced;" color="#000000"> toOffset) </font><font style="font-family: monospaced;" color="#000080"><b>throws</b></font><font style="font-family: monospaced;" color="#000000"> BadLocationException{ 
        AbstractDocument doc = (AbstractDocument)textComp.getDocument(); 
        guardFilter.addGuardedBlock(doc.createPosition(fromOffset), doc.createPosition(toOffset-</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">)); 
        textComp.getHighlighter().addHighlight(fromOffset+</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">, toOffset-</font><font style="font-family: monospaced;" color="#0000ff">1</font><font style="font-family: monospaced;" color="#000000">, highlightPainter); 
    } 
 
    </font><font style="font-family: monospaced;" color="#000080"><b>public</b></font><font style="font-family: monospaced;" color="#000000"> </font><font style="font-family: monospaced;" color="#000080"><b>void</b></font><font style="font-family: monospaced;" color="#000000"> setGuardEnabled(</font><font style="font-family: monospaced;" color="#000080"><b>boolean</b></font><font style="font-family: monospaced;" color="#000000"> enable){ 
        AbstractDocument doc = (AbstractDocument)textComp.getDocument(); 
        doc.setDocumentFilter(enable ? guardFilter : </font><font style="font-family: monospaced;" color="#000080"><b>null</b></font><font style="font-family: monospaced;" color="#000000">); 
    } 
} </font></pre>
    </td>
  </tr>
</table>
<p><font size="2" face="Verdana">Note we allow only complete lines to be 
guarded, not a portion of line (there are some problem doing so!!). That is why 
addGuardedBlock(..) is made private in above class.</font></p>
<p><b><font size="2" face="Verdana">Note:</font></b></p>
<p><font size="2" face="Verdana">&nbsp;&nbsp;&nbsp;&nbsp; The Guard Filter 
doesn't allow to change the document programmatically also. So the method setGuardEnabled(boolean) is used to enable/disable the guard. Also note that 
disabling the guard doesn't remove the guarded highlights added.</font></p>
<p><b><font size="2" face="Verdana">How to use it ?</font></b></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber4">
  <tr>
    <td width="100%">
    <pre><font style="font-family: monospaced;" color="#000000">JTextArea editor = </font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> JTextArea(code); 
DocumentGuard guard = </font><font style="font-family: monospaced;" color="#000080"><b>new</b></font><font style="font-family: monospaced;" color="#000000"> DocumentGuard(editor); 
guard.addGuardedLines(</font><font style="font-family: monospaced;" color="#0000ff">0</font><font style="font-family: monospaced;" color="#000000">, </font><font style="font-family: monospaced;" color="#0000ff">0</font><font style="font-family: monospaced;" color="#000000">); 
guard.addGuardedLines(</font><font style="font-family: monospaced;" color="#0000ff">2</font><font style="font-family: monospaced;" color="#000000">, </font><font style="font-family: monospaced;" color="#0000ff">5</font><font style="font-family: monospaced;" color="#000000">); 
guard.addGuardedLines(</font><font style="font-family: monospaced;" color="#0000ff">11</font><font style="font-family: monospaced;" color="#000000">, </font><font style="font-family: monospaced;" color="#0000ff">11</font><font style="font-family: monospaced;" color="#000000">); 
guard.addGuardedLines(</font><font style="font-family: monospaced;" color="#0000ff">15</font><font style="font-family: monospaced;" color="#000000">, </font><font style="font-family: monospaced;" color="#0000ff">15</font><font style="font-family: monospaced;" color="#000000">); 
guard.setGuardEnabled(</font><font style="font-family: monospaced;" color="#000080"><b>true</b></font><font style="font-family: monospaced;" color="#000000">);</font></pre>
    </td>
  </tr>
</table>
<p><a href="http://www.jroller.com/resources/s/santhosh/DocumentGuard.jnlp">
<img border="0" src="http://java.sun.com/products/jfc/tsc/sightings/images/webstart.small.jpg" width="115" height="20"></a></p>
<p><font size="2" face="Verdana">Your comments are appreciated.</font></p>

</body>

</html>